#ifndef __PPP_SORT__
#define __PPP_SORT__ 'u'
namespace PPP {
	template<typename _Tp, typename _Comp> void merge_sort(_Tp *l, _Tp *r, _Comp compare) {
		unsigned _siz = r - l;
		_Tp *f = new _Tp[_siz], *ll = f, *rr = f + _siz, 
			*kf, *i, *L, *M, *R, *left, *right;
		for(unsigned b = 1; b <= _siz; ) {
			kf = f, i = l;
			for(; i + b < r; ) {
				L = i, M = i + b, R = i + b + b, left = L, right = M;
				if(R > r)
					R = r;
				while(left != M && right != R)
					if(compare(*left, *right))
						*kf = *left, kf++, left++;
					else
						*kf = *right, kf++, right++;
				while(left != M)
					*kf = *left, kf++, left++;
				while(right != R)
					*kf = *right, kf++, right++;
				i = R;
			}
			while(i != r)
				*kf = *i, *kf++, *i++;
			b <<= 1, kf = l, i = ll;
			for(; i + b < rr; ) {
				L = i, M = i + b, R = i + b + b, left = L, right = M;
				if(R > rr)
					R = rr;
				while(left != M && right != R)
					if(compare(*left, *right))
						*kf = *left, kf++, left++;
					else
						*kf = *right, kf++, right++;
				while(left != M)
					*kf = *left, kf++, left++;
				while(right != R)
					*kf = *right, kf++, right++;
				i = R;
			}
			while(i != rr)
				*kf = *i, *kf++, *i++;
			b <<= 1;
		}
		delete []f;
	}
	template<typename _Tp> void merge_sort(_Tp *l, _Tp *r) {
		auto compare = [](_Tp a, _Tp b) -> bool { return a < b; };
		merge_sort(l, r, compare);
	}
}
#endif
